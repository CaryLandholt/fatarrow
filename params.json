{
  "name": "Fatarrow",
  "tagline": "AngularJS Reference Architecture",
  "body": "# fatarrow\r\n###An [AngularJS](http://angularjs.org/) application Reference Architecture\r\n[![License][license-image]][license-url]\r\n[![Version][version-image]][version-url]\r\n[![Build Status][build-image]][build-url]\r\n[![Dependency Status][dependencies-image]][dependencies-url]\r\n\r\nBuild [AngularJS](http://angularjs.org/) applications with [CoffeeScript](http://coffeescript.org/) - **without the ceremony**. By the way, you can write JavaScript too.\r\n\r\n\r\n## Table of Contents\r\n* [Installing](#installing)\r\n* [Running](#running)\r\n* [Scripting](#scripting)\r\n* [Styling](#styling)\r\n* [Templating](#templating)\r\n* [Structure](#structure)\r\n* [Features](#features)\r\n* [Configuration](#conf)\r\n* [Contributing](#contributing)\r\n* [Changelog](#changelog)\r\n* [License](#license)\r\n\r\n\r\n## Installing\r\nBefore running, you must install and configure the following one-time dependencies:\r\n\r\n* [Git](http://git-scm.com/)\r\n* [Node.js](http://nodejs.org/)\r\n\r\nEnter the following in the terminal\r\n\r\nOption 1: Using Yeoman Generator (Recommended)\r\n```bash\r\n$ npm install -g gulp yo\r\n$ npm install -g generator-fatarrow\r\n$ mkdir my-new-project && cd $_\r\n$ yo fatarrow\r\n```\r\n\r\nOption 2: Clone this repo\r\n```bash\r\n$ npm install -g gulp\r\n$ git clone git@github.com:CaryLandholt/fatarrow.git\r\n$ cd fatarrow\r\n$ npm install\r\n```\r\n\r\n## Running\r\nHere are some useful commands to get started:\r\n\r\nGet all commands and options by typing\r\n\r\n```bash\r\n$ gulp help\r\n```\r\n\r\nRunning with With a fake backend ([$httpBackend](https://docs.angularjs.org/api/ngMockE2E/service/$httpBackend))\r\n```bash\r\n$ gulp\r\n```\r\nWith a real backend (gulp will proxy calls to the backend of your choice)\r\n```bash\r\n$ gulp --backend\r\n```\r\nBuild for production\r\n```bash\r\n$ gulp --prod --no-serve\r\n```\r\nRun tests on your build server\r\n```bash\r\n$ npm test\r\n```\r\nDeploy your app<a name=\"deploy\"></a>\r\n```bash\r\n$ npm test\r\n$ gulp --prod --no-serve\r\n# deploy to a path (configuration in /config/locationConfig.coffee)\r\n$ gulp deploy\r\n# deploy to S3 (configurtion in /config/s3Config.coffee)\r\n$ gulp deploy --target s3\r\n```\r\n\r\n## Scripting\r\nYour choice of scripting languages.\r\n\r\n* **JavaScript**\r\n* **[Babel](https://babeljs.io/)**\r\n* **[CoffeeScript](coffeescript.org)**\r\n* **[LiveScript](livescript.net)**\r\n* **[TypeScript](http://www.typescriptlang.org/)**\r\n\r\n## Styling\r\nYour choice of styling languages.\r\n\r\n* **CSS**\r\n* **[LESS](http://lesscss.org/)**\r\n* **[Sass](http://sass-lang.com/)**\r\n\r\n## Templating\r\nYour choice of templating engines.\r\n\r\n* **HTML**\r\n* **[Haml](http://haml.info/)**\r\n* **[Jade](http://jade-lang.com/)**\r\n* **[Markdown](http://daringfireball.net/projects/markdown/)**\r\n\r\n## Structure\r\n- File extensions supported by fatarrow:\r\n  - Scripts: `.coffee`, `.js`, `.ls`, `.ts`, `.es6`\r\n  - Styles: `.less`, `.css`, `.scss`\r\n  - Templates: `.html`, `.haml`, `.jade`\r\n\r\n**(Note: to keep the example succint, `.coffee`, `.html` and `.less` extensions are used below. However, all of the file extensions listed above can be used, and even can be mix-and-matched.)**\r\n\r\nThe root directory generated for a fatarrow app:\r\n<pre>\r\n├──  e2e/\r\n├──  config/\r\n├──  src/\r\n│   ├──  components/\r\n│   │   └──  comp/\r\n│   │   │   ├──  test\r\n│   │   │   ├──  └──  comp.spec.coffee\r\n│   │   │   ├──  comp.coffee\r\n│   │   │   └──  comp.html\r\n│   │   │   └──  comp.backend.coffee\r\n│   │   │   └──  comp.less\r\n│   ├──  app/\r\n│   │   ├──  app.coffee\r\n│   │   ├──  appRoutes.coffee\r\n│   │   └──  views.backend.coffee\r\n│   ├──  home/\r\n│   │   ├──  homeController.coffee\r\n│   │   ├──  homeRoutes.coffee\r\n│   │   └──  home.html\r\n│   ├──  img/\r\n│   │   └──  angularjs.jpg\r\n│   └──  index.html\r\n├──  tasks/\r\n├──  bower_components/\r\n├──  nodes_modules/\r\n├──  .bowerrc\r\n├──  .gitignore\r\n├──  bower.json\r\n├──  gulpfile.coffee\r\n├──  package.json\r\n</pre>\r\n\r\nExplanation of the folders:\r\n- *`src/app`*: Angular module for the app. All app level config should go here.\r\n- *`src/home`*: Each feature of the app should go in its own folder. It should contain all scripts, styles, templates and tests within the feature folder.\r\n- *`src/components`*: Reusable components (directives, factories, styles, etc.)\r\n- *`e2e`*: Protractor tests. They should also be separated by features/components.\r\n- *`config`*: Configurtion for gulp tasks broken up by each task.\r\n\r\n## Features\r\n- *Fake data*: Running `gulp` will include the `.backend.coffee` files and therefore Angular's $httpBackend will be utilized. This should be used for backendless development.\r\n- *Real data*: Running `gulp --backend` will proxy all backend calls to the backend of your choice. [See below](#conf) for configuration instructions.\r\n- *Production build*: Running `gulp --prod` will produce builds for production. This includes:\r\n\t- *ngAnnotate* : make your angular code minification proof\r\n\t- *[ngClassify](https://github.com/CaryLandholt/ng-classify)* : CoffeeScript classes for angular\r\n\t- *minification* : JS, CSS and HTML\r\n\t- *image minification*: images from teh `img` folder are compressed\r\n\t- *rev*: minified files are rev'ed for browser cache busting\r\n\t- *templatecache* : take all angular templates and include them in the minified scripts\r\n\t- *deploy*: deploy to a path or to [AWS S3](http://aws.amazon.com/s3/). [see above](#deploy) for commands.\r\n- *Dev Workflow*:\r\n\t- *watch* : watch your `src` folder and rebuild and reload automatically\r\n\t- *linting* : lint `.js` and `.coffee` files. style checking and fixing with [JSCS](http://jscs.info/)\r\n\t- *test* : run e2e (protractor) and unit (karma) tests\r\n\t- *[browserSync](http://www.browsersync.io/)* : test on multiple devices simultaneously\r\n\t- *newer*: only process changed files\r\n\t- *HTML5Mode*: [Angular's html5Mode](https://docs.angularjs.org/guide/$location) is supported on the BrowserSync server. Be sure to [configure your production web server](https://docs.angularjs.org/guide/$location). HTMO5Mode is turned on by default. See Angular's documentation to turn it off for browser compatibility.\r\n\t- *plato*: perform code visualization, static analysis, and complexity analysis\r\n\r\n## Configuration<a name=\"conf\"></a>\r\n- *.jscsrc*: options for JSCS. [See reference](http://jscs.info/rules.html)\r\n- *.jshintrc*: options for jsHint. [See reference](http://jshint.com/docs/options/)\r\n\r\n**(Note: Configuration for the rest of the gulp plug-ins lives in the `config` folder.)**\r\n- *app.coffee*\r\n\t- *`APP_NAME`*: name of the angular module for the app\r\n- *bower.coffee*\r\n\t- *`BOWER_COMPONENTS`*: consume dependencies from bower by specifying dependency name, version, dependency type (scripts, styles, etc.) and a list of files to be consumed (cherry picking files).\r\n- *coffeeLint.coffee*: options for linting CoffeeScript. [See reference](http://www.coffeelint.org/#options)\r\n- *e2e.coffee*: options for protractor. [See reference](https://github.com/angular/protractor/blob/master/docs/referenceConf.js).\r\n- *karma.coffee*: options for karma. [See reference](http://karma-runner.github.io/0.8/config/configuration-file.html)\r\n- *languages.coffee*: disable compilers not in use to optimize your build\r\n- *less.coffee*: options for the less compiler. [See reference](http://lesscss.org/usage/)\r\n- *locationDeploy.coffee*: deploy app to a path\r\n- *plato.coffee*: options for plato. [See reference](https://github.com/es-analysis/plato)\r\n- *s3Deploy.coffee*: options to deploy to AWS S3. [See reference](https://www.npmjs.com/package/s3)\r\n- *`SCRIPTS`*: load order for scripts\r\n- *server.coffee*: options for browser-sync development server\r\n\t- *`PROXY_CONFIG`*: proxy backend calls during development with connect-modrewrite. [See reference](https://www.npmjs.com/package/connect-modrewrite)\r\n\t- *`PORT`*: run app on a specific port (default: 8181)\r\n- *`STYLES`*: load order for styles\r\n\r\n### Add Bower Component\r\nYou need three pieces of information for each Bower component to include in your app.\r\n\r\n1. The Bower component name (e.g. *restangular*)\r\n2. The version of the component (e.g. *1.4.0*)\r\n3. The files within the component to include in your app (e.g. *restangular.min.js*)\r\n\r\nThe following will include the **restangular** component, version **1.4.0**, and place the `dist/restangular.min.js` file in the `vendor/scripts` directory.  By default, all Bower components will be placed in the `vendor` directory.\r\n```coffee\r\nBOWER_COMPONENTS =\r\n\t'restangular': '1.4.0':\r\n\t\tscripts: 'dist/restangular.min.js'\r\n```\r\n\r\nIf load order is important, include a reference to the file in the **SCRIPTS** section.\r\n\r\nThe following will ensure **restangular** is loaded prior to `app.js`.\r\n```coffee\r\nSCRIPTS =\r\n\t'**/angular.min.js'\r\n\t'**/restangular.min.js'\r\n\t'**/app.js'\r\n\t'**/*.js'\r\n```\r\n\r\nFor AngularJS components, include a reference to the module within your application.  For example:\r\n```coffee\r\nangular.module('app', ['restangular']);\r\n```\r\n\r\n## Contributing\r\nSee [CONTRIBUTING.md](CONTRIBUTING.md)\r\n\r\n\r\n## Changelog\r\nSee [CHANGELOG.md](CHANGELOG.md)\r\n\r\n\r\n## License\r\nSee [LICENSE](LICENSE)\r\n\r\n\r\n[build-image]:            http://img.shields.io/travis/CaryLandholt/fatarrow.svg?style=flat\r\n[build-url]:              http://travis-ci.org/CaryLandholt/fatarrow\r\n\r\n[dependencies-image]:     http://img.shields.io/gemnasium/CaryLandholt/fatarrow.svg?style=flat\r\n[dependencies-url]:       https://gemnasium.com/CaryLandholt/fatarrow\r\n\r\n[license-image]:          http://img.shields.io/badge/license-MIT-blue.svg?style=flat\r\n[license-url]:            LICENSE\r\n\r\n[version-image]:          http://img.shields.io/github/tag/CaryLandholt/fatarrow.svg?style=flat\r\n[version-url]:            https://github.com/CaryLandholt/fatarrow/tags\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}